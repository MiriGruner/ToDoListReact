{"ast":null,"code":"import axios from 'axios';\n\n// הגדרת כתובת ה-API כברירת מחדלt\nconst apiClient = axios.create({\n  baseURL: \"https://localhost:5234\",\n  // עדכני את ה-port אם צריך\n  timeout: 5000 // הגדרת Timeout של 5 שניות\n});\n\n// הוספת Interceptor לטיפול בשגיאות\napiClient.interceptors.response.use(response => response,\n// החזרת התשובה במקרה של הצלחה\nerror => {\n  var _error$response, _error$response2;\n  console.error('API Error:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status, (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data);\n  return Promise.reject(error); // החזרת השגיאה לטיפול נוסף\n});\nconst apiService = {\n  // שליפת כל המשימות\n  getTasks: async () => {\n    try {\n      const result = await apiClient.get('/items');\n      return result.data;\n    } catch (error) {\n      console.error('Failed to fetch tasks', error);\n      throw error;\n    }\n  },\n  // הוספת משימה חדשה\n  addTask: async name => {\n    try {\n      const newTask = {\n        name,\n        isComplete: false\n      };\n      const result = await apiClient.post('/items', newTask);\n      return result.data;\n    } catch (error) {\n      console.error('Failed to add task', error);\n      throw error;\n    }\n  },\n  // עדכון מצב המשימה (סימון כבוצע/לא בוצע)\n  setCompleted: async (id, isComplete) => {\n    try {\n      const updatedTask = {\n        isComplete\n      };\n      const result = await apiClient.put(`/items/${id}`, updatedTask);\n      return result.data;\n    } catch (error) {\n      console.error('Failed to update task status', error);\n      throw error;\n    }\n  },\n  // מחיקת משימה\n  deleteTask: async id => {\n    try {\n      await apiClient.delete(`/items/${id}`);\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Failed to delete task', error);\n      throw error;\n    }\n  }\n};\nexport default apiService;","map":{"version":3,"names":["axios","apiClient","create","baseURL","timeout","interceptors","response","use","error","_error$response","_error$response2","console","status","data","Promise","reject","apiService","getTasks","result","get","addTask","name","newTask","isComplete","post","setCompleted","id","updatedTask","put","deleteTask","delete","success"],"sources":["C:/Users/The user/source/repos/ToDoListReact/src/service.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// הגדרת כתובת ה-API כברירת מחדלt\r\nconst apiClient = axios.create({\r\n  baseURL: \"https://localhost:5234\", // עדכני את ה-port אם צריך\r\n  timeout: 5000, // הגדרת Timeout של 5 שניות\r\n});\r\n\r\n// הוספת Interceptor לטיפול בשגיאות\r\napiClient.interceptors.response.use(\r\n  response => response, // החזרת התשובה במקרה של הצלחה\r\n  error => {\r\n    console.error('API Error:', error.response?.status, error.response?.data);\r\n    return Promise.reject(error); // החזרת השגיאה לטיפול נוסף\r\n  }\r\n);\r\n\r\nconst apiService = {\r\n  // שליפת כל המשימות\r\n  getTasks: async () => {\r\n    try {\r\n      const result = await apiClient.get('/items');\r\n      return result.data;\r\n    } catch (error) {\r\n      console.error('Failed to fetch tasks', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // הוספת משימה חדשה\r\n  addTask: async (name) => {\r\n    try {\r\n      const newTask = { name, isComplete: false };\r\n      const result = await apiClient.post('/items', newTask);\r\n      return result.data;\r\n    } catch (error) {\r\n      console.error('Failed to add task', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // עדכון מצב המשימה (סימון כבוצע/לא בוצע)\r\n  setCompleted: async (id, isComplete) => {\r\n    try {\r\n      const updatedTask = { isComplete };\r\n      const result = await apiClient.put(`/items/${id}`, updatedTask);\r\n      return result.data;\r\n    } catch (error) {\r\n      console.error('Failed to update task status', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // מחיקת משימה\r\n  deleteTask: async (id) => {\r\n    try {\r\n      await apiClient.delete(`/items/${id}`);\r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('Failed to delete task', error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\nexport default apiService;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,SAAS,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC7BC,OAAO,EAAE,wBAAwB;EAAE;EACnCC,OAAO,EAAE,IAAI,CAAE;AACjB,CAAC,CAAC;;AAEF;AACAH,SAAS,CAACI,YAAY,CAACC,QAAQ,CAACC,GAAG,CACjCD,QAAQ,IAAIA,QAAQ;AAAE;AACtBE,KAAK,IAAI;EAAA,IAAAC,eAAA,EAAAC,gBAAA;EACPC,OAAO,CAACH,KAAK,CAAC,YAAY,GAAAC,eAAA,GAAED,KAAK,CAACF,QAAQ,cAAAG,eAAA,uBAAdA,eAAA,CAAgBG,MAAM,GAAAF,gBAAA,GAAEF,KAAK,CAACF,QAAQ,cAAAI,gBAAA,uBAAdA,gBAAA,CAAgBG,IAAI,CAAC;EACzE,OAAOC,OAAO,CAACC,MAAM,CAACP,KAAK,CAAC,CAAC,CAAC;AAChC,CACF,CAAC;AAED,MAAMQ,UAAU,GAAG;EACjB;EACAC,QAAQ,EAAE,MAAAA,CAAA,KAAY;IACpB,IAAI;MACF,MAAMC,MAAM,GAAG,MAAMjB,SAAS,CAACkB,GAAG,CAAC,QAAQ,CAAC;MAC5C,OAAOD,MAAM,CAACL,IAAI;IACpB,CAAC,CAAC,OAAOL,KAAK,EAAE;MACdG,OAAO,CAACH,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAY,OAAO,EAAE,MAAOC,IAAI,IAAK;IACvB,IAAI;MACF,MAAMC,OAAO,GAAG;QAAED,IAAI;QAAEE,UAAU,EAAE;MAAM,CAAC;MAC3C,MAAML,MAAM,GAAG,MAAMjB,SAAS,CAACuB,IAAI,CAAC,QAAQ,EAAEF,OAAO,CAAC;MACtD,OAAOJ,MAAM,CAACL,IAAI;IACpB,CAAC,CAAC,OAAOL,KAAK,EAAE;MACdG,OAAO,CAACH,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC1C,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAiB,YAAY,EAAE,MAAAA,CAAOC,EAAE,EAAEH,UAAU,KAAK;IACtC,IAAI;MACF,MAAMI,WAAW,GAAG;QAAEJ;MAAW,CAAC;MAClC,MAAML,MAAM,GAAG,MAAMjB,SAAS,CAAC2B,GAAG,CAAC,UAAUF,EAAE,EAAE,EAAEC,WAAW,CAAC;MAC/D,OAAOT,MAAM,CAACL,IAAI;IACpB,CAAC,CAAC,OAAOL,KAAK,EAAE;MACdG,OAAO,CAACH,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAqB,UAAU,EAAE,MAAOH,EAAE,IAAK;IACxB,IAAI;MACF,MAAMzB,SAAS,CAAC6B,MAAM,CAAC,UAAUJ,EAAE,EAAE,CAAC;MACtC,OAAO;QAAEK,OAAO,EAAE;MAAK,CAAC;IAC1B,CAAC,CAAC,OAAOvB,KAAK,EAAE;MACdG,OAAO,CAACH,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAMA,KAAK;IACb;EACF;AACF,CAAC;AAED,eAAeQ,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}